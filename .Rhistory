return(
list(
data = df,
plot = plt
)
)
}
normalised_data = summariseAllData(normalised_data)
normalised_data$data %>%
write_csv(paste('outputs', chain_type, 'complete-data.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'F0') %>%
write_csv(paste('outputs', chain_type, 'F0_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'N2') %>%
write_csv(paste('outputs', chain_type, 'N2_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC') %>%
write_csv(paste('outputs', chain_type, 'BALBC_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'CBA') %>%
write_csv(paste('outputs', chain_type, 'CBA_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'F0,N2') %>%
write_csv(paste('outputs', chain_type, 'F0_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'N2,BALBC') %>%
write_csv(paste('outputs', chain_type, 'BALBC_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,CBA') %>%
write_csv(paste('outputs', chain_type, 'BALBC_CBA.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,F0,N2') %>%
write_csv(paste('outputs', chain_type, 'BALBC_F0_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,CBA,N2') %>%
write_csv(paste('outputs', chain_type, 'BALBC_CBA_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,CBA,F0,N2') %>%
write_csv(paste('outputs', chain_type, 'BALBC_CBA_F0_N2.csv', sep = '/'))
View(normalised_data)
View(normalised_data$data)
normalised_data$plot
normalised_data$data %>%
write_csv(paste('outputs', chain_type, '1_complete-data.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'F0') %>%
write_csv(paste('outputs', chain_type, '1.0_F0_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'N2') %>%
write_csv(paste('outputs', chain_type, '1.1_N2_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC') %>%
write_csv(paste('outputs', chain_type, '1.2_BALBC_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'CBA') %>%
write_csv(paste('outputs', chain_type, '1.3_CBA_only.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'F0,N2') %>%
write_csv(paste('outputs', chain_type, '2.0_F0_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'N2,BALBC') %>%
write_csv(paste('outputs', chain_type, '2.1_BALBC_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,CBA') %>%
write_csv(paste('outputs', chain_type, '2.2_BALBC_CBA.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,F0,N2') %>%
write_csv(paste('outputs', chain_type, '3.1_BALBC_F0_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,CBA,N2') %>%
write_csv(paste('outputs', chain_type, '3.2_BALBC_CBA_N2.csv', sep = '/'))
normalised_data$data %>%
filter(aa_present_in == 'BALBC,CBA,F0,N2') %>%
write_csv(paste('outputs', chain_type, '4.0_BALBC_CBA_F0_N2.csv', sep = '/'))
View(normalised_data)
source("~/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Leo Post Doc/_Ari-TCR-analysis/TCR analysis_corrected.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Leo Post Doc/_Ari-TCR-analysis/TCR analysis_corrected.R", echo=TRUE)
View(normalised_data)
View(normalised_data)
normalised_data[["plot"]]
View(normalised_data)
normalised_data[["data"]]
View(normalised_data[["data"]])
View(normalised_data)
normalised_data[["data"]]
setup_session <- function(wd){
library(data.table)
library(tidyverse)
library(patchwork)
library(msa)
library(igraph)
library(edgeR)
library(rlang)
setwd(wd)
}
setup_session('~/OneDrive - University College London/_Leo Post Doc/_Ari-TCR-analysis/')
getGraphComponentSizes = function(x, rng){
largest_component <- sapply(rng, function(t) {
g <- igraph::graph_from_adjacency_matrix(x <= t, mode="undirected", diag=FALSE)
max(igraph::components(g)$csize)
})
names(largest_component) = paste('d', rng, sep = '')
return(largest_component)
}
plotComponentSizes = function(lc){
ld = diff(lc)
link_df = data.frame(level = as.numeric(c(0, gsub('d', '', names(ld)))),
differences = as.numeric(c(0, ld)),
largest_component = as.numeric(lc))
link_df_plot = link_df %>%
group_by(differences, largest_component) %>%
slice_head(n = 1) %>%
arrange(level)
for(i in 1:nrow(link_df_plot)){
lineheight = link_df_plot$largest_component[i]
plot(lc, type="b",
xlab="TCRdist threshold", ylab="Largest component size")
abline(h = lineheight)
title('Largest component size\nper threshold', sub = paste('Component size:', lineheight, sep = ': '))
plot(c(0, ld), type = 'b')
abline(v = which(lc == lineheight)-1)
title('Lagged differences\nbetween sizes', sub = paste('Component size', lineheight, sep = ': '))
}
return(link_df)
}
selectThreshold = function(df, component_size){
return(
as.numeric(df[df$largest_component == component_size, ] %>% slice_head(n = 1) %>% pull(level))
)
}
assignMembership = function(dm, threshold){
g <- graph_from_adjacency_matrix((dm <= threshold) * 1, mode = "undirected", diag = FALSE)
comp <- components(g)
dm$cluster_id <- comp$membership
return(tibble(id_nt = rownames(dm), cluster_id = comp$membership))
}
getClusterSizes = function(dm, filt_lvl){
cluster_sizes = dm %>% group_by(cluster_id) %>% summarise(count = n()) %>% arrange(desc(count))
label = round(nrow(cluster_sizes %>% filter(count > filt_lvl)) / nrow(cluster_sizes), digits = 3)
x_loc = nrow(cluster_sizes %>% filter(count > filt_lvl))*0.75
y_loc = max(cluster_sizes$count / sum(cluster_sizes$count)) / 1.33
print(ggplot(data = cluster_sizes %>% filter(count > filt_lvl),
aes(x = factor(cluster_id, levels = cluster_id),
y = count / sum(cluster_sizes$count)))+
geom_col(colour = NA)+
labs(x = 'Clusters',
y = 'Cluster size',
title = paste('Cluster size distribution: Remove <', filt_lvl))+
theme_bw()+
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())+
annotate('text', x = x_loc, y = y_loc, label = paste('Prop plotted:', label))
)
return(cluster_sizes)
}
makeClusterLogo = function(data, cluster_name){
tmp_cluster = data %>% filter(cluster_id == cluster_name)
msa_ = msa(inputSeqs = tmp_cluster$cdr3_b_aa,
method = 'ClustalOmega', type = 'protein')
aligned_seqs <- as.character(unmasked(msa_))  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
fasta = paste(paste('>', tmp_cluster$id_nt, sep = ''), aligned_seqs, sep = '\n')
return(fasta)
}
chain = 'beta'
dynamic_path = paste('outputs', chain, 'tcrdist/1.0_F0_only_pgens.csv', sep = '/')
dist_path = paste('outputs', chain, 'tcrdist/1.0_F0_only_tcrdistmatrix.csv', sep = '/')
fasta_out = paste('outputs', chain, 'tcrdist/alignments/B1_depleted.fasta', sep = '/')
write_aln = T
dynamic_data = read.csv(dynamic_path)
dynamic_distmat = read.csv(dist_path) %>% select(-X)
View(dynamic_distmat)
rownames(dynamic_distmat) = colnames(dynamic_distmat) = gsub('\\.', '-', colnames(dynamic_distmat))
largest_component = getGraphComponentSizes(dynamic_distmat, rng = seq(0, 200, 5))
par(mfrow=c(1,2))
threshold_df = plotComponentSizes(largest_component)
par(mfrow=c(1,1))
selected_threshold = readline('>Analyse graphs and input cluster size to cut at:')
threshold = selectThreshold(threshold_df, selected_threshold)
cluster_membership = assignMembership(dynamic_distmat, threshold)
cluster_sizes = getClusterSizes(cluster_membership, filt_lvl = 1)
dynamic_data = left_join(dynamic_data, cluster_membership)
write.csv(dynamic_data, file = gsub('.csv', '_clustered.csv', dynamic_path))
which(cluster_sizes$count < 10)
1:(which(cluster_sizes$count < 10)[1]-1)
View(cluster_sizes)
table(which(cluster_sizes$count < 10))
length(which(cluster_sizes$count < 10))
table(cluster_sizes$count < 10)
x = 1
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test)
fasta_seq
gsub('tcrdist', 'tcrdist/alignments',
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out))
fasta_out = paste('outputs', chain, 'tcrdist/alignments/1.0_F0_only.fasta', sep = '/')
gsub('tcrdist', 'tcrdist/alignments',
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out))
for(x in (1:(which(cluster_sizes$count < 10)[1]-1))){
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test)
if(write_aln == T){
write_lines(fasta_seq,
gsub('tcrdist', 'tcrdist/alignments',
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out)), sep = '\n')
}
}
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out)
for(x in (1:(which(cluster_sizes$count < 10)[1]-1))){
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test)
if(write_aln == T){
write_lines(fasta_seq,
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out), sep = '\n')
}
}
View(dynamic_data)
View(cluster_sizes)
x = 3
cluster_test = cluster_sizes$cluster_id[x]
data = dynamic_data
cluster_name = cluster_test
trim5 = T
trim3 = T
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs
strsplit(seqs, '')
y = strsplit(seqs, '')
y = strsplit(seqs, '')[[1]]
ifelse(trim5 == T, 2, 1)
ifelse(trim3 == T, length(y)-1, 1)
y[ifelse(trim5 == T, 2, 1)]:y[ifelse(trim3 == T, length(y)-1, length(y))]
y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))]
y
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
method = 'ClustalOmega', type = 'protein')
aligned_seqs <- as.character(unmasked(msa_))  # extract aligned strings
aligned_seqs
paste('C', as.character(unmasked(msa_)), 'F', sep = '')
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
print(ggseqlogo::ggseqlogo(aligned_seqs, method = 'prob')+ggtitle(paste('cluster', cluster_name)))
seqs = tmp_cluster$cdr3_b_aa
seqs
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
gapOpening = 20,
gapExtension = 0.1,
method = 'ClustalOmega', type = 'protein')
?msa
aligned_seqs <- paste('ClustalW', as.character(unmasked(msa_)), 'F', sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
aligned_seqs
msa_ = msa(inputSeqs = seqs,
gapOpening = 20,
gapExtension = 0.1,
method = 'ClustalW', type = 'protein')
aligned_seqs <- paste('C', as.character(unmasked(msa_)), 'F', sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
aligned_seqs
paste(paste('>', tmp_cluster$id_nt, sep = ''), aligned_seqs, sep = '\n')
paste(paste('>', tmp_cluster$id_nt, sep = ''), aligned_seqs, sep = '\n')
for(x in (1:(which(cluster_sizes$count < 10)[1]-1))){
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test)
if(write_aln == T){
write_lines(fasta_seq,
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out), sep = '\n')
}
}
for(x in (1:(which(cluster_sizes$count < 10)[1]-1))){
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test)
if(write_aln == T){
write_lines(fasta_seq,
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out), sep = '\n')
}
}
for(x in (1:(which(cluster_sizes$count < 10)[1]-1))){
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test,
trim5 = F, trim3 = F)
if(write_aln == T){
write_lines(fasta_seq,
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out), sep = '\n')
}
}
makeClusterLogo = function(data, cluster_name, trim5 = T, trim3 = T){
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
gapOpening = 20,
gapExtension = 0.1,
method = 'ClustalW', type = 'protein')
aligned_seqs <- paste('C', as.character(unmasked(msa_)), 'F', sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
fasta = paste(paste('>', tmp_cluster$id_nt, sep = ''), aligned_seqs, sep = '\n')
return(fasta)
}
for(x in (1:(which(cluster_sizes$count < 10)[1]-1))){
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test,
trim5 = F, trim3 = F)
if(write_aln == T){
write_lines(fasta_seq,
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out), sep = '\n')
}
}
makeClusterLogo = function(data, cluster_name, trim5 = T, trim3 = T){
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
gapOpening = 20,
gapExtension = 0.1,
method = 'ClustalW', type = 'protein')
aligned_seqs = paste(ifelse(trim5 == T, 'C', ''),
as.character(unmasked(msa_)),
ifelse(trim3 == T, 'F', ''),
sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
fasta = paste(paste('>', tmp_cluster$id_nt, sep = ''), aligned_seqs, sep = '\n')
return(fasta)
}
x = 1
cluster_test = cluster_sizes$cluster_id[x]
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test,
trim5 = F, trim3 = F)
if(write_aln == T){
write_lines(fasta_seq,
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out), sep = '\n')
}
fasta_seq = makeClusterLogo(data = dynamic_data,
cluster_name = cluster_test,
trim5 = T, trim3 = T)
fasta_seq
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
gapOpening = 20,
gapExtension = 0.1,
method = 'Muscle', type = 'protein')
ifelse(trim5 == T, 'C', '')
paste(ifelse(trim5 == T, 'C', ''),
as.character(unmasked(msa_)),
ifelse(trim3 == T, 'F', ''),
sep = '')
aligned_seqs = paste(ifelse(trim5 == T, 'C', ''),
as.character(unmasked(msa_)),
ifelse(trim3 == T, 'F', ''),
sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
gapOpening = 20,
gapExtension = 0.1,
method = 'ClustalOmega', type = 'protein')
msa_ = msa(inputSeqs = seqs,
method = 'ClustalOmega', type = 'protein')
aligned_seqs = paste(ifelse(trim5 == T, 'C', ''),
as.character(unmasked(msa_)),
ifelse(trim3 == T, 'F', ''),
sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
method = 'ClustalOmega', type = 'protein')
aligned_seqs = paste(ifelse(trim5 == T, 'C', ''),
as.character(unmasked(msa_)),
ifelse(trim3 == T, 'F', ''),
sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
print(ggseqlogo::ggseqlogo(aligned_seqs, method = 'prob')+ggtitle(paste('cluster', cluster_name)))
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
makeClusterLogo = function(data, cluster_name, trim5 = T, trim3 = T){
tmp_cluster = data %>% filter(cluster_id == cluster_name)
seqs = tmp_cluster$cdr3_b_aa
seqs = sapply(strsplit(seqs, ''),
function(y){
paste(y[ifelse(trim5 == T, 2, 1):ifelse(trim3 == T, length(y)-1, length(y))], collapse = '')
})
msa_ = msa(inputSeqs = seqs,
method = 'ClustalOmega', type = 'protein')
aligned_seqs = paste(ifelse(trim5 == T, 'C', ''),
as.character(unmasked(msa_)),
ifelse(trim3 == T, 'F', ''),
sep = '')  # extract aligned strings
print(ggseqlogo::ggseqlogo(aligned_seqs)+ggtitle(paste('cluster', cluster_name)))
fasta = paste(paste('>', tmp_cluster$id_nt, sep = ''), aligned_seqs, sep = '\n')
return(fasta)
}
list.files(paste('outputs', chain, 'tcrdist', sep = '/'))
basename(list.files(paste('outputs', chain, 'tcrdist', sep = '/'), pattern = '.csv'))
?basename
chain = 'beta'
basepath = paste('outputs', chain, 'tcrdist', sep = '/')
files = basename(list.files(basepath, pattern = '.csv'))
gsub('_.*?$', '', files)
unique(gsub('_.*?$', '', files))
chain = 'beta'
basepath = paste('outputs', chain, 'tcrdist', sep = '/')
files = basename(list.files(basepath, pattern = '.csv'))
filesets = unique(gsub('_.*?$', '', files))
i = 1
paste(basepath, '1.0_F0_only_pgens.csv', sep = '/')
grep(filesets[i], files, value = T)
grep(paste(filesets[i], 'pgens', sep = '.*?')
)
grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T)
paste(basepath, grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T), sep = '/')
paste(basepath, grep(paste(filesets[i], 'tcrdistmatrix', sep = '.*?'), files, value = T), sep = '/')
paste(basepath, grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T), sep = '/')
dynamic_path = paste(basepath, grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T), sep = '/')
dist_path = paste(basepath, grep(paste(filesets[i], 'tcrdistmatrix', sep = '.*?'), files, value = T), sep = '/')
i =1
chain = 'beta'
write_aln = T
basepath = paste('outputs', chain, 'tcrdist', sep = '/')
files = basename(list.files(basepath, pattern = '.csv'))
filesets = unique(gsub('_.*?$', '', files))
paste(basepath, grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T), sep = '/')
dynamic_path = paste(basepath, grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T), sep = '/')
dist_path = paste(basepath, grep(paste(filesets[i], 'tcrdistmatrix', sep = '.*?'), files, value = T), sep = '/')
dynamic_data = read.csv(dynamic_path)
dynamic_distmat = read.csv(dist_path) %>% select(-X)
rownames(dynamic_distmat) = colnames(dynamic_distmat) = gsub('\\.', '-', colnames(dynamic_distmat))
dynamic_path
paste(basepath, gsub('^(.*?)_pgens.csv', '\\1.fasta', grep(paste(filesets[i], 'pgens', sep = '.*?')), files, value = T), sep = '/')
paste(basepath, gsub('^(.*?)_pgens.csv', '\\1.fasta', grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T)), sep = '/')
dynamic_path = paste(basepath, grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T), sep = '/')
dist_path = paste(basepath, grep(paste(filesets[i], 'tcrdistmatrix', sep = '.*?'), files, value = T), sep = '/')
fasta_out = paste(basepath, gsub('^(.*?)_pgens.csv', '\\1.fasta', grep(paste(filesets[i], 'pgens', sep = '.*?'), files, value = T)), sep = '/')
dynamic_data = read.csv(dynamic_path)
dynamic_distmat = read.csv(dist_path) %>% select(-X)
rownames(dynamic_distmat) = colnames(dynamic_distmat) = gsub('\\.', '-', colnames(dynamic_distmat))
largest_component = getGraphComponentSizes(dynamic_distmat, rng = seq(0, 200, 5))
par(mfrow=c(1,2))
threshold_df = plotComponentSizes(largest_component)
par(mfrow=c(1,1))
threshold = selectThreshold(threshold_df, selected_threshold)
selected_threshold = readline('>Analyse graphs and input cluster size to cut at:')
threshold = selectThreshold(threshold_df, selected_threshold)
cluster_membership = assignMembership(dynamic_distmat, threshold)
cluster_sizes = getClusterSizes(cluster_membership, filt_lvl = 1)
dynamic_data = left_join(dynamic_data, cluster_membership)
write.csv(dynamic_data, file = gsub('.csv', '_clustered.csv', dynamic_path))
gsub('.fasta',
paste('-', cluster_test, '.fasta', sep = ''),
fasta_out)
source("~/Library/CloudStorage/OneDrive-UniversityCollegeLondon/_Leo Post Doc/_Ari-TCR-analysis/TCR clustering.R", echo=TRUE)
